import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-big-store-client',
  templateUrl: './big-store-client.component.html',
  styleUrls: ['./big-store-client.component.css']
})
export class BigStoreClientComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : window as any;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  products(): Promise<Product[]> {
      let url_ = this.baseUrl + "/BigStore/Products";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          },
        //  mode: 'no-cors'
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processProducts(_response);
      });
  }

  protected processProducts(response: Response): Promise<Product[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(Product.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<Product[]>(null as any);
  }

  /**
   * @return Success
   */
  categories(): Promise<Category[]> {
      let url_ = this.baseUrl + "/BigStore/Categories";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processCategories(_response);
      });
  }

  protected processCategories(response: Response): Promise<Category[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(Category.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<Category[]>(null as any);
  }

  /**
   * @return Success
   */
  productsExt(): Promise<Product> {
      let url_ = this.baseUrl + "/BigStoreCustomerExtended/ProductsExt";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processProductsExt(_response);
      });
  }

  protected processProductsExt(response: Response): Promise<Product> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Product.fromJS(resultData200);
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<Product>(null as any);
  }

  /**
   * @return Success
   */
  products2(): Promise<Product[]> {
      let url_ = this.baseUrl + "/BigStoreCustomerExtended/Products";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processProducts2(_response);
      });
  }

  protected processProducts2(response: Response): Promise<Product[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(Product.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<Product[]>(null as any);
  }

  /**
   * @return Success
   */
  categories2(): Promise<Category[]> {
      let url_ = this.baseUrl + "/BigStoreCustomerExtended/Categories";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processCategories2(_response);
      });
  }

  protected processCategories2(response: Response): Promise<Category[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(Category.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<Category[]>(null as any);
  }
}

export class Category implements ICategory {
  categoryId?: number;
  description?: string | undefined;
  isRoot?: boolean | undefined;
  categoryHierarchyChildCategoryNavigation?: CategoryHierarchy | undefined;
  categoryHierarchyFatherCategoryNavigations?: CategoryHierarchy[] | undefined;
  products?: Product[] | undefined;

  constructor(data?: ICategory) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.categoryId = _data["categoryId"];
          this.description = _data["description"];
          this.isRoot = _data["isRoot"];
          this.categoryHierarchyChildCategoryNavigation = _data["categoryHierarchyChildCategoryNavigation"] ? CategoryHierarchy.fromJS(_data["categoryHierarchyChildCategoryNavigation"]) : <any>undefined;
          if (Array.isArray(_data["categoryHierarchyFatherCategoryNavigations"])) {
              this.categoryHierarchyFatherCategoryNavigations = [] as any;
              for (let item of _data["categoryHierarchyFatherCategoryNavigations"])
                  this.categoryHierarchyFatherCategoryNavigations!.push(CategoryHierarchy.fromJS(item));
          }
          if (Array.isArray(_data["products"])) {
              this.products = [] as any;
              for (let item of _data["products"])
                  this.products!.push(Product.fromJS(item));
          }
      }
  }

  static fromJS(data: any): Category {
      data = typeof data === 'object' ? data : {};
      let result = new Category();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["categoryId"] = this.categoryId;
      data["description"] = this.description;
      data["isRoot"] = this.isRoot;
      data["categoryHierarchyChildCategoryNavigation"] = this.categoryHierarchyChildCategoryNavigation ? this.categoryHierarchyChildCategoryNavigation.toJSON() : <any>undefined;
      if (Array.isArray(this.categoryHierarchyFatherCategoryNavigations)) {
          data["categoryHierarchyFatherCategoryNavigations"] = [];
          for (let item of this.categoryHierarchyFatherCategoryNavigations)
              data["categoryHierarchyFatherCategoryNavigations"].push(item.toJSON());
      }
      if (Array.isArray(this.products)) {
          data["products"] = [];
          for (let item of this.products)
              data["products"].push(item.toJSON());
      }
      return data;
  }
}

export interface ICategory {
  categoryId?: number;
  description?: string | undefined;
  isRoot?: boolean | undefined;
  categoryHierarchyChildCategoryNavigation?: CategoryHierarchy | undefined;
  categoryHierarchyFatherCategoryNavigations?: CategoryHierarchy[] | undefined;
  products?: Product[] | undefined;
}

export class CategoryHierarchy implements ICategoryHierarchy {
  id?: number;
  fatherCategory?: number;
  childCategory?: number;
  childCategoryNavigation?: Category | undefined;
  fatherCategoryNavigation?: Category | undefined;

  constructor(data?: ICategoryHierarchy) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.id = _data["id"];
          this.fatherCategory = _data["fatherCategory"];
          this.childCategory = _data["childCategory"];
          this.childCategoryNavigation = _data["childCategoryNavigation"] ? Category.fromJS(_data["childCategoryNavigation"]) : <any>undefined;
          this.fatherCategoryNavigation = _data["fatherCategoryNavigation"] ? Category.fromJS(_data["fatherCategoryNavigation"]) : <any>undefined;
      }
  }

  static fromJS(data: any): CategoryHierarchy {
      data = typeof data === 'object' ? data : {};
      let result = new CategoryHierarchy();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["fatherCategory"] = this.fatherCategory;
      data["childCategory"] = this.childCategory;
      data["childCategoryNavigation"] = this.childCategoryNavigation ? this.childCategoryNavigation.toJSON() : <any>undefined;
      data["fatherCategoryNavigation"] = this.fatherCategoryNavigation ? this.fatherCategoryNavigation.toJSON() : <any>undefined;
      return data;
  }
}

export interface ICategoryHierarchy {
  id?: number;
  fatherCategory?: number;
  childCategory?: number;
  childCategoryNavigation?: Category | undefined;
  fatherCategoryNavigation?: Category | undefined;
}

export class Discount implements IDiscount {
  discountId?: number;
  productId?: number;
  name?: string | undefined;
  fromDate?: Date | undefined;
  toDate?: Date | undefined;
  discountPercentage?: number;
  enabled?: boolean | undefined;
  product?: Product | undefined;

  constructor(data?: IDiscount) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.discountId = _data["discountId"];
          this.productId = _data["productId"];
          this.name = _data["name"];
          this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>undefined;
          this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>undefined;
          this.discountPercentage = _data["discountPercentage"];
          this.enabled = _data["enabled"];
          this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
      }
  }

  static fromJS(data: any): Discount {
      data = typeof data === 'object' ? data : {};
      let result = new Discount();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["discountId"] = this.discountId;
      data["productId"] = this.productId;
      data["name"] = this.name;
      data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
      data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
      data["discountPercentage"] = this.discountPercentage;
      data["enabled"] = this.enabled;
      data["product"] = this.product ? this.product.toJSON() : <any>undefined;
      return data;
  }
}

export interface IDiscount {
  discountId?: number;
  productId?: number;
  name?: string | undefined;
  fromDate?: Date | undefined;
  toDate?: Date | undefined;
  discountPercentage?: number;
  enabled?: boolean | undefined;
  product?: Product | undefined;
}

export class MenuDiscount implements IMenuDiscount {
  menuId?: number;
  name?: string | undefined;
  fromDate?: Date | undefined;
  toDate?: Date | undefined;
  discountPercentage?: number;
  enabled?: boolean | undefined;
  pOrders?: POrder[] | undefined;

  constructor(data?: IMenuDiscount) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.menuId = _data["menuId"];
          this.name = _data["name"];
          this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>undefined;
          this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>undefined;
          this.discountPercentage = _data["discountPercentage"];
          this.enabled = _data["enabled"];
          if (Array.isArray(_data["pOrders"])) {
              this.pOrders = [] as any;
              for (let item of _data["pOrders"])
                  this.pOrders!.push(POrder.fromJS(item));
          }
      }
  }

  static fromJS(data: any): MenuDiscount {
      data = typeof data === 'object' ? data : {};
      let result = new MenuDiscount();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["menuId"] = this.menuId;
      data["name"] = this.name;
      data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
      data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
      data["discountPercentage"] = this.discountPercentage;
      data["enabled"] = this.enabled;
      if (Array.isArray(this.pOrders)) {
          data["pOrders"] = [];
          for (let item of this.pOrders)
              data["pOrders"].push(item.toJSON());
      }
      return data;
  }
}

export interface IMenuDiscount {
  menuId?: number;
  name?: string | undefined;
  fromDate?: Date | undefined;
  toDate?: Date | undefined;
  discountPercentage?: number;
  enabled?: boolean | undefined;
  pOrders?: POrder[] | undefined;
}

export class POrder implements IPOrder {
  orderId?: number;
  productOrMenu?: number;
  date?: Date;
  updateDate?: Date;
  orderState?: string | undefined;
  isMenu?: boolean;
  productOrMenu1?: Product | undefined;
  productOrMenuNavigation?: MenuDiscount | undefined;

  constructor(data?: IPOrder) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.orderId = _data["orderId"];
          this.productOrMenu = _data["productOrMenu"];
          this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
          this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
          this.orderState = _data["orderState"];
          this.isMenu = _data["isMenu"];
          this.productOrMenu1 = _data["productOrMenu1"] ? Product.fromJS(_data["productOrMenu1"]) : <any>undefined;
          this.productOrMenuNavigation = _data["productOrMenuNavigation"] ? MenuDiscount.fromJS(_data["productOrMenuNavigation"]) : <any>undefined;
      }
  }

  static fromJS(data: any): POrder {
      data = typeof data === 'object' ? data : {};
      let result = new POrder();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["orderId"] = this.orderId;
      data["productOrMenu"] = this.productOrMenu;
      data["date"] = this.date ? this.date.toISOString() : <any>undefined;
      data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
      data["orderState"] = this.orderState;
      data["isMenu"] = this.isMenu;
      data["productOrMenu1"] = this.productOrMenu1 ? this.productOrMenu1.toJSON() : <any>undefined;
      data["productOrMenuNavigation"] = this.productOrMenuNavigation ? this.productOrMenuNavigation.toJSON() : <any>undefined;
      return data;
  }
}

export interface IPOrder {
  orderId?: number;
  productOrMenu?: number;
  date?: Date;
  updateDate?: Date;
  orderState?: string | undefined;
  isMenu?: boolean;
  productOrMenu1?: Product | undefined;
  productOrMenuNavigation?: MenuDiscount | undefined;
}

export class Product implements IProduct {
  productId?: number;
  name?: string | undefined;
  details?: string | undefined;
  price?: number;
  categoryId?: number;
  category?: Category | undefined;
  discounts?: Discount[] | undefined;
  pOrders?: POrder[] | undefined;

  constructor(data?: IProduct) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.productId = _data["productId"];
          this.name = _data["name"];
          this.details = _data["details"];
          this.price = _data["price"];
          this.categoryId = _data["categoryId"];
          this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
          if (Array.isArray(_data["discounts"])) {
              this.discounts = [] as any;
              for (let item of _data["discounts"])
                  this.discounts!.push(Discount.fromJS(item));
          }
          if (Array.isArray(_data["pOrders"])) {
              this.pOrders = [] as any;
              for (let item of _data["pOrders"])
                  this.pOrders!.push(POrder.fromJS(item));
          }
      }
  }

  static fromJS(data: any): Product {
      data = typeof data === 'object' ? data : {};
      let result = new Product();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["productId"] = this.productId;
      data["name"] = this.name;
      data["details"] = this.details;
      data["price"] = this.price;
      data["categoryId"] = this.categoryId;
      data["category"] = this.category ? this.category.toJSON() : <any>undefined;
      if (Array.isArray(this.discounts)) {
          data["discounts"] = [];
          for (let item of this.discounts)
              data["discounts"].push(item.toJSON());
      }
      if (Array.isArray(this.pOrders)) {
          data["pOrders"] = [];
          for (let item of this.pOrders)
              data["pOrders"].push(item.toJSON());
      }
      return data;
  }
}

export interface IProduct {
  productId?: number;
  name?: string | undefined;
  details?: string | undefined;
  price?: number;
  categoryId?: number;
  category?: Category | undefined;
  discounts?: Discount[] | undefined;
  pOrders?: POrder[] | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
      throw result;
  else
      throw new ApiException(message, status, response, headers, null);
}
